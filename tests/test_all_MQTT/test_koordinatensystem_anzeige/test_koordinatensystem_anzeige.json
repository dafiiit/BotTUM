[{"id":"750585696b9da8b3","type":"tab","label":"Vektor","disabled":false,"info":"","env":[]},{"id":"a755e789.38a6a8","type":"http in","z":"750585696b9da8b3","name":"","url":"/data","method":"get","upload":false,"swaggerDoc":"","x":220,"y":200,"wires":[["964d110f.0c5ef"]]},{"id":"964d110f.0c5ef","type":"template","z":"750585696b9da8b3","name":"Generate HTML","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE HTML>\n<html>\n<head>\n    <title>Simple Live Display</title>\n    <style>\n        #vector-container {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        #canvas-container { width: 50vw; height: 50vh; }\n        #Ax,#Ay,#Az { margin-left: 30pt;}\n    </style>\n    <script src=\"https://threejs.org/build/three.js\"></script>\n    <script type=\"text/javascript\">\n        var ws;\n        var wsUri = \"ws:\";\n        var loc = window.location;\n        console.log(loc);\n        if (loc.protocol === \"https:\") { wsUri = \"wss:\"; }\n        // This needs to point to the web socket in the Node-RED flow\n        // ... in this case it's ws/simple\n        wsUri += \"//\" + loc.host + loc.pathname.replace(\"data\", \"ws/data\");\n\n        var vector;\n        var scene;\n        var camera;\n        var renderer;\n        var arrowHelper;\n\n        function initWebGL() {\n            const container = document.getElementById('canvas-container');\n            scene = new THREE.Scene();\n            camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n            renderer = new THREE.WebGLRenderer();\n            renderer.setSize(container.clientWidth, container.clientHeight);\n            container.appendChild(renderer.domElement);\n\n            const axesHelper = new THREE.AxesHelper(1); // LÃ¤nge der Achsen festlegen\n            scene.add(axesHelper);\n        }\n\n        function updateScene() {\n            const origin = new THREE.Vector3(0, 0, 0);\n\n            arrowHelper = new THREE.ArrowHelper(vector.normalize(), origin, vector.length(), 0xff0000);\n            scene.add(arrowHelper);\n\n            var length = vector.length() * 2;\n            camera.position.set(length, length, length);\n            camera.lookAt(origin);\n\n            renderer.render(scene, camera);\n        }\n\n        function wsConnect() {\n            console.log(\"connect\", wsUri);\n            ws = new WebSocket(wsUri);\n\n            ws.onmessage = function (msg) {\n                var data = JSON.parse(msg.data);\n                var Ax = data.Ax;\n                var Ay = data.Ay;\n                var Az = data.Az;\n                document.getElementById('Ax').innerHTML = '<span>X: ' + Ax.toFixed(4) + '</span><br>';\n                document.getElementById('Ay').innerHTML = '<span>Y: ' + Ay.toFixed(4) + '</span><br>';\n                document.getElementById('Az').innerHTML = '<span>Z: ' + Az.toFixed(4) + '</span><br>';\n                vector = new THREE.Vector3(Ax, Ay, Az);\n\n                if (!arrowHelper) {\n                    // Erste Aktualisierung der Szene\n                    updateScene();\n                } else {\n                    // Aktualisierung der Pfeilanzeige\n                    scene.remove(arrowHelper);\n                    updateScene();\n                }\n            };\n\n            ws.onopen = function () {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"connected\";\n                //ws.send(\"Open for data\");\n                console.log(\"connected\");\n            };\n\n            ws.onclose = function () {\n                // update the status div with the connection status\n                document.getElementById('status').innerHTML = \"not connected\";\n                // in case of lost connection tries to reconnect every 3 secs\n                setTimeout(wsConnect, 3000);\n            };\n        }\n\n        window.addEventListener('DOMContentLoaded', function () {\n            initWebGL();\n            wsConnect();\n        });\n    </script>\n</head>\n<body>\n<font face=\"Arial\">\n<h1>Simple Live Display</h1>\n<div id=\"vector-container\">\n    <p id=\"Ax\"></p>\n    <p id=\"Ay\"></p>\n    <p id=\"Az\"></p>\n</div>\n<div id=\"canvas-container\"></div>\n<!-- <button type=\"button\" onclick='doit(\"click\");'>Click to send message</button> -->\n<hr/>\n<div id=\"status\">unknown</div>\n</font>\n</body>\n</html>\n\n","output":"str","x":440,"y":200,"wires":[["221791e3.f9a79"]]},{"id":"221791e3.f9a79","type":"http response","z":"750585696b9da8b3","name":"","statusCode":"","headers":{},"x":630,"y":200,"wires":[]},{"id":"f0e29df5.344f08","type":"mqtt in","z":"750585696b9da8b3","name":"","topic":"sensor/nodemcu/glove","qos":"2","datatype":"json","broker":"f8883587.70c7d8","nl":false,"rap":false,"rh":0,"inputs":0,"x":280,"y":120,"wires":[["cf74507f.66f6c8"]]},{"id":"cf74507f.66f6c8","type":"websocket out","z":"750585696b9da8b3","name":"","server":"","client":"674c63c5.123c6","x":510,"y":120,"wires":[]},{"id":"e11c25bf6cb614bf","type":"comment","z":"750585696b9da8b3","name":"Vektor-Anzeige mit live update","info":"","x":180,"y":80,"wires":[]},{"id":"f8883587.70c7d8","type":"mqtt-broker","name":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"674c63c5.123c6","type":"websocket-client","path":"/ws/data","tls":"","wholemsg":"false","hb":"0","subprotocol":""}]